#!/usr/bin/env ruby

require 'json'
require 'pp'
require 'open3'
require 'yaml'
require 'digest'

module Ow
  CONTAINER_NAME = "kureikain/opsworks:0.4"
  JSON_FILE      = "opsworks.json"

  class << self
    def colorize(text, color_code)
        "#{color_code}#{text}\033[0m"
    end

    def red(text); colorize(text, "\033[31m"); end
    def green(text); colorize(text, "\033[32m"); end
    def yellow(text); colorize(text, "\033[43m"); end
  end

  class Generator
    attr_reader :json_file
    # When value is a string, output it
    # When a symbol, invoke method to get it
    SCHEMA = {
      :instance => {
        :layer => "Layer",
        :name => "Name",
        :private_ip => 'private_ip',
        :ip => :gen_ip_v4,
        :aws_instance_id => :gen_instance_id,
      },

      :layer => {
        :name => "Name"
      }
    }

    def initialize(file = JSON_FILE)
      @json_file = file
    end

    def gather_input(schema)
      input = {}
      scheme.each do |k,v|
        puts green("> Enter #{k}:")
        input_data = nil
        case v
          when Symbol
            if self.respond_to?(v)
              input_data = self.send(v)
            end
            puts "Missing method #{v} for generator"
            exit 1
          when String
            input_data = STDIN.gets.chomp
          else
            puts "Unsupport #{k} #{v}"
        end
        input[k] = input_data
      end
      input
    end

    def instance
      input = gather_input SCHEMA[:instance]
      puts "> Will generate random public ip"

      puts "> Update our opswork file"
      instance = Instance.new(input[:layer], input[:name], {
        'private_ip' => input[:private_ip],
        "public_dns_name" =>  'null',
        "private_dns_name" => "ip-10-50-10-131.ec2.internal",
        "backends" => 2,
        "aws_instance_id" => input[:aws_instance_id],
        "ip" => input[:ip],
        "instance_type" => "t2.micro",
        "status" => "online",
        "id" => "fbfbd3f8-de1e-4d8f-a391-b9a114721a3b",
        "elastic_ip" =>  'null',
        "created_at" => Time.now.strftime("%Y-%m-%dT%H:%M:%S-07:00"),
        "booted_at" => Time.now.strftime("%Y-%m-%dT%H:%M:%S-07:00"),
        "region" =>  "us-east-1",
        "availability_zone" => "us-east-1e",
        "infrastructure_class" => "ec2"
      }, nil)

      @opsworks_json = Json.new json_file
      @opsworks_json.add(instance)
      @opsworks_json.flush
    end

    private
    def gen_instance_id
      value = []
      value << (0...32).map{ ('A'..'Z').to_a[rand(26)]  }.join
      value << Time.new.to_i
      Digest::SHA256.hexdigest(value.join("-"))[0..6]
    end

    def gen_ip_v4
      ([54] << Array.new(3){rand(256)}).join('.')
    end
  end

  class Command
    attr_reader :insance

    def initialize(instance)
      @instance = instance
    end
  end

  class Docker
    def run

    end

    def exec

    end
  end

  class Layer
    attr_reader :name, :hash

    def initialize(name, hash)
      @name = name
      @hash = hash
    end

    def to_hash
      @hash.merge({'name' => name})
    end
  end

  class Instance
    attr_reader :name, :layer
    attr_reader :image_name

    def to_hash
      @hash.merge({'name' => name})
    end

    def initialize(layer, name, hash, image_name)
      @layer = layer
      @name = name
      @hash = hash
      @image_name = image_name
      inspect
    end

    def inspect
      o, s = Open3.capture2("docker inspect #{container_name}", :stdin_data => "")
      begin
        @json = JSON.parse(o)
        @json = @json.first
      rescue => e
        puts e
      end
    end

    def [](idx)
      if @hash[idx].nil?
        nil
      else
        @hash[idx] || @hash[idx.to_s]
      end
    end

    # Destroy container
    def destroy
      cmd = "docker stop #{container_name}"
      o, s = Open3.capture2(cmd, :stdin_data => "")
      puts "Stop #{o}"
      cmd = "docker rm #{container_name}"
      o, s = Open3.capture2(cmd, :stdin_data => "")
      puts "Destory #{o}"
    end

    # Get Json from SSH host
    def getjson

    end


    def container_ip
      @json["NetworkSettings"]["IPAddress"]
    end

    def run(opt)
      if @json.nil? || @json["NetworkSettings"].nil?
        #cmd = "docker run --privileged=true --name #{container_name} -h #{name} -d -v #{Dir.pwd}:/opt/opsworks #{image_name}"
        cmd = "docker run --privileged=true --name #{container_name} udo vi /endeludo vi /etc/elasticsearch/elasticsearch.yml
        d -v #{Dir.pwd}:/opt/opsworks #{image_name}"
        puts cmd
        o, s = Open3.capture2(cmd, :stdin_data => "")
        inspect
      end
    end

    def container_name
      "#{@name}-#{@hash['private_ip']}"
    end

    # Generate a prefix for this folder
    def prefix
      @md5 ||= Digest::MD5.new
      @md5.update Dir.pwd
    end
  end

  class Json
    attr_reader :hash, :json_file, :opsworks_json

    def initialize(json_file)
      @json_file = json_file
      begin
        @opsworks_json = JSON.parse(File.read(json_file))
      rescue e
        puts "Error when parse JSON. #{e}"
        exit 1
      end
    end

    def layers
      opsworks_json["opsworks"]["layers"]
    end

    def merge_current_instance!(node)
      opsworks_json["opsworks"]["instance"].merge!(node.to_hash)

      puts JSON.generate(opsworks_json, object_nl: "\n", array_nl: "\n")
      save!
    end

    def flush
      save!
    end


    def add(element)
      case element
      when Instance
        add_instance(element)
      when Layer
        add_layer(element)
      end
    end

    def add_instance(instance)
      if opsworks_json["opsworks"]["layers"][instance.layer].nil?
        opsworks_json["opsworks"]["layers"][instance.layer] = {}
      end
      opsworks_json["opsworks"]["layers"][instance.layer][instance.name] = instance.to_hash
    end

    def add_layer(layer)
      opsworks_json["opsworks"]["layers"][layer["name"]] = layer
    end

    private
    def save!
JSON.pretty_generate(opsworks_json, object_nl: "\n", array_nl: "\n")
      File.open(json_file, 'w') do |f|
        f.write(JSON.pretty_generate(opsworks_json, object_nl: "\n", array_nl: "\n"))
      end
    end
  end

  class Runner

    attr_reader :ssh, :json_file, :opsworks_json
    attr_reader :args
    attr_reader :rc
    attr_reader :container_name

    class << self
      def dispatch(args)
        ow = Runner.new args
        case args[0]
        when 'destroy'
          ow.destroy
        when 'json', 'getjson', 'get_json'
          ow.get_json
        when 'init'
          ow.init
        when 'exec'
          ow.exec
        when 'ssh'
          ow.ssh
        when 'current', 'promote'
          ow.promote_current args[1]
        when 'test'
          ow.test
        when 'ls'
          ow.list
        when 'generate'
          ow.generate
        when 'fw', 'forward'
          ow.forward_port
        else
          help
        end
        ow
      end

      def help
        puts <<-EOF
        getjson: Get json from SSH host define in yaml file
        destroy: destroy container
        init: init container
        current: set current to this node
        test: run test
        ls: list instance in JSON file
        forward: fw container src-port1 dest-port1 src-port2 dest-port2
        generate host: generate a host and save to JSON
        generate layer: generate a layer and save to JSON(Not implement yet)
        EOF
      end
    end

    def initialize(args)
      @args = args
      @rc = 0
      @container_name = CONTAINER_NAME
      @json_file = ENV['OW_JSON'] || JSON_FILE
      parse
    end

    def parse
      begin
        config = YAML.load_file('ow.yml')

        if config["CONTAINER_NAME"]
          @container_name = config["CONTAINER_NAME"]
        end

        @opsworks_json = Json.new @json_file

        @instances = @opsworks_json.layers
          .select {|name, l| !l["instances"].nil? }
          .map do |name, layer|
          layer["instances"].map do |host, instance|
            Instance.new name, host, instance, container_name
          end
        end.flatten

      rescue  Exception => e
        puts "Cannot parse json. Please run `ow getjson` to fetch a new JSON.\n\n"
        #exit 1
      end
    end

    # Spawn container
    def spawn_container
      @instances.each do |i|
        puts "> Create container for: #{i['private_ip']}"
        i.run({})
        puts "> Got IP: #{i.container_ip}"
      end
      run_on('all', silent: true) do
        inject_hostname
      end
    end

    # Filter containers base on our condition
    # Logic:
    # * -> all
    # all -> all
    # first -> first one only
    # last -> last on
    # rnd -> random
    # cluster1 -> a particular host
    # cluster1,cluster2 -> multiple hosts
    def filter(hosts, instance)
      puts "Evaludate filter to run: #{hosts.to_s}. instance: #{instance.name}"
      if hosts == '*' || hosts == 'all'
        return true
      end

      if instance.name == hosts 
        return true
      end

      if hosts.include?(',')
        h = hosts.split(',').map(&:strip)
        return h.include?(instance.name)
      end

      if hosts.is_a? String
        return instance.name.include?(hosts)
      end
    end

    # Run command on container
    def run_on(name, opts = {})
      @instances.select do |i|
        puts name, i
        filter(name, i)
      end.each do |i|
        build_cmd = yield
        puts "\n\n>> Run on #{i.container_name}. Build cmd: #{build_cmd}\n==================\n\n"
        cmd = "docker exec #{i.container_name} /bin/bash -c \"#{build_cmd}\""
        if opts[:silent]
          Open3.capture2(cmd, :stdin_data => "")
        else
          o, s = Open3.capture2(cmd, :stdin_data => "")
          puts "\n================\nRun on #{i.name}:\n#{build_cmd}\n#{o}\n================\nOutput\n"
        end
      end
    end

    # Inject hostname
    def inject_hostname
      hosts = @instances.map do |i|
        "#{i.container_ip} #{i.name}"
      end.join('\n')
      "echo -e '#{hosts}' >> /etc/hosts"
    end

    # Fix IP address
    def match_private_ip_to_container
      @instances.map do |i|
        "sed -ie \"s/#{i['private_ip'].gsub('.', '\.')}/#{i.container_ip}/g\" /ops/#{@json_file}"
      end.join(";")
    end

    # Update current instance
    def promote_current(name)
      node = @instances.select { |i| name == i.name }
      if node.empty?
        puts "Cannot find node #{name}"
      else
        node = node.first
        @opsworks_json.merge_current_instance!(node)
      end
    end

    # Generator
    def generate
      type = args[1]
      case type
      when 'host'
        Ow::Generator.new.instance
      else
        puts Ow::red("Invalid type")
      end
    end

    # Run test
    def test
      # Map container to host
      host = args[1]
      if host.nil? || host == ''
        @rc = 1
        puts "Plese specify hosts"
        return
      end
      spawn_container
      s = match_private_ip_to_container
      puts "> Update Host IP to container IP using sed.\n#{s}\n=====================\n"
      test_option = "-l info"
      if !args[3].nil?
        test_option = args.slice(3, args.length).join(' ')
      end

      puts "Extra parameter: #{test_option} #{host}"
      run_on host do
        %Q{
        mkdir -p /ops/cookbooks; cp /opt/opsworks/#{@json_file} /ops;#{s};
        cp /opt/opsworks/Berksfile /ops; cd /ops; rsync -rap /opt/opsworks/ cookbooks/;
        rsync -rap /opt/opsworks-cookbooks/ cookbooks/;
        export LC_CTYPE=en_US.UTF-8; berks install; berks vendor a;
        cp -rf a/* cookbooks/;
        chef-client --local-mode  -o 'recipe[#{args[2]}]' -j /ops/#{@json_file} #{test_option} 2>&1;
        }
      end
    end

    # Destroy
    def destroy
      @instances.each(&:destroy)
    end

    # List nodes
    def list
      @instances.each { |i| puts "=============\n#{i.name}\n>#{i.to_hash}\n\n" }
    end

    # Forward port to local use open ssh
    def forward_port
      if `ssh docker@192.168.99.100 pwd`.strip != '/home/docker'
        puts Ow::red("* Make sure that you can ssh into docker machine.")
        exit 2
      end

      name = args[1]
      ip = @instances
            .select { |i| i.container_name.include?(name) }
            .map { |i| i.container_ip }
            .first
      ports_map = args[2..args.length].each_slice(2).map do |src, dest|
        "-L #{src}:#{ip}:#{dest}"
      end.join(" ")
      forward_cmd =  "ssh -nNT #{ports_map} docker@192.168.99.100"
      puts Ow::yellow("> Will forward with command: \n#{forward_cmd}")
      exec(forward_cmd)
    end

    # Get json data
    def get_json
      config = YAML.load_file('ow.yml')
      @ssh = config["SSH"]

      cmd = %W{ssh -i
              #{@ssh["Key"]}
              #{@ssh["User"]}@#{@ssh["Host"]}
              "sudo /usr/sbin/opsworks-agent-cli get_json"
      }.join(" ")
      puts cmd

      o, s = Open3.capture2(cmd, :stdin_data => "")
      puts o
      puts @json_file

      File.open(@json_file, "w") { |f| f.write o }
    end

    def init
      puts "User?"
      user = STDIN.gets.chomp
      puts "Host?"
      host = STDIN.gets.chomp
      puts "Key?"
      key  = STDIN.gets.chomp

      File.open('ow.yml', 'w') do |f|
        f.write <<-EOF
---
SSH:
  User: #{user}
  Host: #{host}
  Key: #{key}
CONTAINER_NAME: "kureikain/opsworks:0.4"
        EOF
      end
      puts "> You can manually edit content of ow.yml file later if you want."
      puts "> Consider run ow getjson now to download json"
    end
  end
end

# Allow us to load this when run test
if $PROGRAM_NAME.split('/').last == 'ow'
  exit(Ow::Runner.dispatch(ARGV).rc)
end
