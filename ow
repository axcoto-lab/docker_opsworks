#!/usr/bin/env ruby

require 'json'
require 'pp'
require 'open3'
require 'yaml'
require 'digest'

module Ow
  CONTAINER_NAME = "kureikain/opsworks:0.3"

  class Generator
    def instance(layer, instance)

    end
  end

  class Command
    attr_reader :insance

    def initialize(instance)
      @instance = instance
    end
  end


  class Instance
    attr_reader :name, :layer

    def to_hash
      @hash.merge({'name' => name})
    end

    def initialize(layer, name, hash)
      @layer = layer
      @name = name
      @hash = hash
      inspect
    end

    def inspect
      o, s = Open3.capture2("docker inspect #{container_name}", :stdin_data => "")
      begin
        @json = JSON.parse(o)
        @json = @json.first
      rescue => e
        puts e
      end
    end

    def [](idx)
      if @hash[idx].nil?
        nil
      else
        @hash[idx] || @hash[idx.to_s]
      end
    end

    # Destroy container
    def destroy
      cmd = "docker stop #{container_name}"
      o, s = Open3.capture2(cmd, :stdin_data => "")
      puts "Stop #{o}"
      cmd = "docker rm #{container_name}"
      o, s = Open3.capture2(cmd, :stdin_data => "")
      puts "Destory #{o}"
    end

    def container_ip
      @json["NetworkSettings"]["IPAddress"]
    end

    def run
      if @json.nil? || @json["NetworkSettings"].nil?
        cmd = "docker run --name #{container_name} -d -v #{Dir.pwd}:/opt/opsworks #{CONTAINER_NAME}"
        o, s = Open3.capture2(cmd, :stdin_data => "")
        inspect
      end
    end

    def container_name
      "#{@name}-#{@hash['private_ip']}"
    end

    # Generate a prefix for this folder
    def prefix
      @md5 ||= Digest::MD5.new
      @md5.update Dir.pwd
    end
  end

  class Runner

    attr_reader :ssh, :json_file, :opsworks_json
    attr_reader :args
    attr_reader :rc

    class << self
      def dispatch(args)
        ow = Runner.new args
        case args[0]
        when 'destroy'
          ow.destroy
        when 'json', 'getjson'
          ow.get_json
        when 'init'
          ow.init
        when 'exec'
          ow.exec
        when 'current'
          ow.promote_current args[1]
        when 'test'
          ow.test
        when 'ls'
          ow.list
        else
          help
        end
        ow
      end

      def help
        puts <<-EOF
        destroy: destroy container
        init: init container
        current: set current to this node
        test: run test
        ls: list instance in JSON file
        EOF
      end
    end

    def initialize(args)
      @args = args
      @rc = 0
      @ssh = {
        user: ENV['OW_SSH_USER'],
        host: ENV['OW_SSH_HOST'],
        key:  ENV['OW_SSH_KEY'],
      }
      @json_file = ENV['OW_JSON'] || 'opsworks.json'
      parse
    end

    def parse
      begin
        @opsworks_json = JSON.parse(File.read(@json_file))

        @instances = @opsworks_json["opsworks"]["layers"]
          .select {|name, l| !l["instances"].nil? }
          .map do |name, layer|
          layer["instances"].map do |host, instance|
            Instance.new name, host, instance
          end
        end.flatten
      rescue  => e
        puts "Cannot parse json. #{e}"
        exit 1
      end
    end

    # Spawn container
    def spawn_container
      @instances.each do |i|
        puts "> Create container for: #{i['private_ip']}"
        i.run
        puts "> Got IP: #{i.container_ip}"
      end
    end

    # Filter containers base on our condition
    # Logic:
    # * -> all
    # all -> all
    # first -> first one only
    # last -> last on
    # rnd -> random
    # cluster1 -> a particular host
    # cluster1,cluster2 -> multiple hosts
    def filter(hosts, instance)
      if hosts == '*' || hosts == 'all'
        return true
      end

      if instance.name == hosts 
        return true
      end

      if hosts.include?(',')
        h = hosts.split(',').map(&:strip)
        return h.include?(instance.name)
      end
    end

    # Run command on container
    def run_on(name)
      @instances.select do |i|
        filter(name, i)
      end.each do |i|
        cmd = "docker exec #{i.container_name} /bin/bash -c \"#{yield}\""
        o, s = Open3.capture2(cmd, :stdin_data => "")
        puts "\n================\nRun on #{i.name}:\n#{o}\n================\n"
      end
    end

    # Fix IP address
    def match_private_ip_to_container
      @instances.map do |i|
        "sed -ie \"s/#{i['private_ip'].gsub('.', '\.')}/#{i.container_ip}/g\" /ops/opsworks.json"
      end.join(";")
    end

    # Update current instance
    def promote_current(name)
      node = @instances.select { |i| name == i.name }
      if node.empty?
        puts "Cannot find node #{name}"
      else
        node = node.first
        @opsworks_json["opsworks"]["instance"].merge!(node.to_hash)
        puts JSON.generate(@opsworks_json, object_nl: "\n", array_nl: "\n")
        File.open("./opsworks.json", 'w') do |f|
          f.write(JSON.pretty_generate(@opsworks_json, object_nl: "\n", array_nl: "\n"))
        end
      end
    end

    # Run test
    def test
      # Map container to host
      host = args[1]
      if host.nil? || host == ''
        @rc = 1
        puts "Plese specify hosts"
        return
      end
      spawn_container
      s = match_private_ip_to_container
      puts "> Update Host IP to container IP.\n#{s}\n"
      run_on host do
        %Q{
        mkdir -p /ops/cookbooks;
        cp /opt/opsworks/opsworks.json /ops;
        cp /opt/opsworks/Berksfile /ops;
        cd /ops;
        #{s};
        berks install; berks vendor cookbooks;
        rsync -rap /opt/opsworks/ cookbooks/;
        echo chef-client --local-mode  -o 'recipe[#{args[2]}]' -j /opt/opsworks/opsworks.json -l info;
        chef-client --local-mode  -o 'recipe[#{args[2]}]' -j /opt/opsworks/opsworks.json -l info 2>&1;
        ls -la /opt/opsworks/
        }
      end
    end

    # Destroy
    def destroy
      @instances.each(&:destroy)
    end

    # List nodes
    def list
      @instances.each { |i| puts "=============\n#{i.name}\n>#{i.to_hash}\n\n" }
    end

    # Get json data
    def get_json
      cmd = %W{ssh -i
              #{@ssh[:key]}
              #{@ssh[:user]}@#{@ssh[:host]}
      }.join(" ")
      o, s = Open3.capture2(cmd, :stdin_data => "")
      File.open('opsworks.json') { |f| f.write o }.close
    end

    def init
      spawn_container
      File.open('ow.yml', 'w') do |f|
        f.write <<-EOF
---
SSH:
  User: ubuntu
  Host:
  Key:
        EOF
      end
      puts "> You can edit content of ow.yml file"
    end
  end
end

exit(Ow::Runner.dispatch(ARGV).rc)
